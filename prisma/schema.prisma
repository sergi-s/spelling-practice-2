generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    sessions      Session[]
    UserWord      UserWord[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Word {
    id              String     @id @default(auto()) @map("_id") @db.ObjectId
    stemmedWord     String     @unique
    representations String[]
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    phraseIDs       String[]   @db.ObjectId
    categories      Phrase[]   @relation(fields: [phraseIDs], references: [id])
    UserWord        UserWord[]
}

model Phrase {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    phrase    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    wordIDs   String[] @db.ObjectId
    posts     Word[]   @relation(fields: [wordIDs], references: [id])
}

model UserWord {
    id                String @id @default(auto()) @map("_id") @db.ObjectId
    word              Word   @relation(fields: [wordId], references: [id])
    wordId            String @db.ObjectId
    user              User   @relation(fields: [userId], references: [id])
    userId            String @db.ObjectId
    encounters        Int    @default(0)
    correctEncounters Int    @default(0)
}
